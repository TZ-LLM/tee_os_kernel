--- /home/chris/oh_patchlibc_0803/openharmony/third_party/musl/include/endian.h	2023-08-07 15:19:23.160403358 +0800
+++ topatch/include/endian.h	2023-08-07 16:24:49.177114612 +0800
@@ -1,3 +1,14 @@
+/*
+ * Copyright (c) 2023 Institute of Parallel And Distributed Systems (IPADS), Shanghai Jiao Tong University (SJTU)
+ * Licensed under the Mulan PSL v2.
+ * You can use this software according to the terms and conditions of the Mulan PSL v2.
+ * You may obtain a copy of Mulan PSL v2 at:
+ *     http://license.coscl.org.cn/MulanPSL2
+ * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
+ * PURPOSE.
+ * See the Mulan PSL v2 for more details.
+ */
 #ifndef _ENDIAN_H
 #define _ENDIAN_H
 
@@ -11,24 +22,24 @@
 
 #define __PDP_ENDIAN 3412
 
-#define BIG_ENDIAN __BIG_ENDIAN
+#define BIG_ENDIAN    __BIG_ENDIAN
 #define LITTLE_ENDIAN __LITTLE_ENDIAN
-#define PDP_ENDIAN __PDP_ENDIAN
-#define BYTE_ORDER __BYTE_ORDER
+#define PDP_ENDIAN    __PDP_ENDIAN
+#define BYTE_ORDER    __BYTE_ORDER
 
 static __inline uint16_t __bswap16(uint16_t __x)
 {
-	return __x<<8 | __x>>8;
+    return __x << 8 | __x >> 8;
 }
 
 static __inline uint32_t __bswap32(uint32_t __x)
 {
-	return __x>>24 | __x>>8&0xff00 | __x<<8&0xff0000 | __x<<24;
+    return __x >> 24 | __x >> (8 & 0xff00) | __x << (8 & 0xff0000) | __x << 24;
 }
 
 static __inline uint64_t __bswap64(uint64_t __x)
 {
-	return __bswap32(__x)+0ULL<<32 | __bswap32(__x>>32);
+    return (__bswap32(__x) + 0ULL) << 32 | __bswap32(__x >> 32);
 }
 
 #if __BYTE_ORDER == __LITTLE_ENDIAN
